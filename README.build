Instructions for building and installing the
ipolates2 library (ip2lib) on Unix.
***************************************************

nceplibs support email: ncep.list.emc.nceplibs.support@noaa.gov


         Contents
         ========
  A. The easy (I hope) way...
  B. The more flexible way
    1. Configuration
    2. Building the library
    3. Testing the library
    4. Installing the library
       - NCO Install
       - GNU Install
       - Uninstalling the library
    5. Cleaning up



A. The easy (I hope) way...
===========================

To build the single (_4), double (_8), and mixed (_d) precision ip2
libraries, you can use the "make_ip2_lib.sh" script ("make_ip2_lib_wcoss-cray.sh" 
on the WCOSS-Cray systems) specifying the build configuration. Type:

  $ make_ip2_lib.sh -h

to get the usage information for the script.

The available build configurations to use are:

  gfortran-debug.setup  ifort-debug.setup  pgf95-debug.setup  xlf2003-debug.setup
  gfortran.setup        ifort.setup        pgf95.setup        xlf2003.setup

  crayftn.setup
  crayftn-debug.setup

The build configurations define the compiler name and compiler flags.  
Those named with "debug" contain flags useful for debugging.

So, on WCOSS Phase 1/2/3, to compile with Intel, you would type:

  $ make_ip2_lib.sh ifort.setup

On Theia you could do the same, or if you wanted to the PGI compiler,

  $ make_ip2_lib.sh pgf95.setup

On WCOSS-Cray/Surge/Luna if you wanted to use the Cray compiler,

  $ make_ip2_lib_wcoss-cray.sh crayftn.setup

This script iterates over the single (_4), double (_8), and mixed (_d) precision
build configurations setting the appropriate default real and integer precision
promotion compiler switches.

Some additional points:
- There is an "NCO-type" install that conforms to NCO's vertical structure.
- There is also a "GNU-type" install.
- The "NCO-type" install is performed by default.
- The libraries are installed relative to the current directory. 
- See section B.4 below for detailed information about the installation
  directory structure.

You can tailor the build process using the "make_ip2_lib.sh" and 
"make_ip2_lib_wcoss-cray.sh" scripts by modifying the relevant build
configuration setup file in the "config-setup/" subdirectory.

Or, if you are going to be testing library builds multiple times, you can
create your own configuration setup file.



B. The more flexible way
========================

1. Configuration
----------------

If you need more flexibility in the library build you can specify the necessary 
information directly to the configure script that generates the makefiles. For
example:

  $ ./configure --prefix=${PWD} \
                --enable-promote=4|8|d \
                FC="ifort" \
                FCFLAGS="-O2 -g"

The --prefix switch sets the installation directory and defaults to /usr/local so
make sure you set it to a directory in which you have write access.

The --enable-promote switch allows you to specify the type of precision build be it
single (_4), double (_8), or mixed (_d) precision. To build the mixed precision library
you would use:

  --enable-promote=d

Not specifying this switch is equivalent to "--enable-promote=4". 

The definition of the "FC" enviroment variable is not strictly necessary as it defaults
to "ifort" on linux systems if available (followed by "gfortran" and "pgf95" if not), and
to "xlf2003" on AIX systems.  


1a. Configuration on WCOSS-Cray
-------------------------------

Some notes concerning the Cray.  First, do not call the compiler directly.  Rather,
use the "ftn" wrapper.  Also, the "--enable-promote" switch does not set the
compiler promote flags nor the FPPFLAGS as on other machines.  So to build 
with Intel (after loading the PrgEnv-intel module) for double precision, you would do:

  $ ./configure --prefix=${PWD} \
                --enable-promote=8 \
                FC="ftn" \
                FCFLAGS="-O2 -g -i8 -r8"  \
                FPPFLAGS="-fpp -save-temps -DLSIZE=8"



2. Building the library
-----------------------

To start the library build for a particular configuration, simply type

  $ make




3. Testing the library
----------------------

A suite of regression tests is located in the ./reg_tests directory.
These tests compare results from two different versions of ip2lib
(typically the branch and trunk versions) to ensure developer
modifications do not inadvertantly break existing functionality.
See the README file in that directory for details on how to build
and run it.  Library developers are expected to run these tests before any
changes are moved to the IP2LIB trunk.

A unit test is located on the ./unit_test directory.  It compares
results from ip2lib against a baseline set of data.  This test is
useful when porting ip2lib to a new platform to ensure it is
working correctly.  See the README in that directory for details
on how to build and run it.

A unit test specifically to test the gdswzd 'c' language wrapper
is in the ./unit_test_for_c directory.  This 'c' program calls
gdswzd for a rotated lat/lon 'B' grid and prints out the
corner point lat/lons and their expected values to standard
output.  See the README in that directory for details on 
how to build and run it.



4. Installing the library
-------------------------

Installation of the library *always* occurs into its own directory within the
directory specified by the --prefix switch. 


NCO Install
...........

To install the library conforming to the NCO vertical structure and naming
conventions on WCOSS Phase 2, type:

  $ make nco_install

Example: for a library version of v2.0.1 and the default precision (_4), the
directory tree will look as follows:

  ip2/
   |
   `--v2.0.1/
         |
         `--libip2_v2.0.1_4.a
         |
         `--include/
               |
               `--ip2_v2.0.1_4/

If you then create the double precsion (_8) and mixed precision (_d) libraries and
invoke "make nco_install", the directory tree will look like:

  ip2/
   |
   `--v2.0.1/
         |
         |--libip2_v2.0.1_4.a
         |--libip2_v2.0.1_d.a
         `--libip2_v2.0.1_8.a
         |
         `--include/
               |
               `--ip2_v2.0.1_4/
               `--ip2_v2.0.1_d/
               `--ip2_v2.0.1_8/

The contents of the "v2.0.1" directory can then be moved into the official
location as needed.

Let's assume the above install was moved into "/usrx/local/nceplibs". To use the
4-byte library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usrx/local/nceplibs/ip2/v2.0.1"
  LDFLAGS="-L${libroot} ${LDFLAGS}"
  LIBS="-lip2_v2.0.1_4"
  FCFLAGS="... -I${libroot}/include/ip2_v2.0.1_4 ..."


NCO Install as on WCOSS-Cray/Surge/Luna
.......................................

To install the library conforming to the NCO vertical structure and naming
conventions on WCOSS-Cray/Surge/Luna, type:

  $ make nco_cray_install

If you create all precision versions of the library and invoke
"make nco_cray_install", the directory tree will look like:

  ip2/
   |
   `--v2.0.1/${COMPILER}/
                   |
                   |--libip2_v2.0.1_4.a
                   |--libip2_v2.0.1_d.a
                   `--libip2_v2.0.1_8.a
                   |
                   `--include/
                         |
                         `--ip2_v2.0.1_4/
                         `--ip2_v2.0.1_d/
                         `--ip2_v2.0.1_8/

Here $COMPILER is the name of the Fortran compiler used.  For example, if at
the configure step you did "FC=ftn", then $COMPILER will be "ftn".  This
may be changed at the configure step by "--enable-wcoss_cray_dir=${your_name}" as:

  $ ./configure --prefix=${PWD} \
                --enable-promote=4|8|d \
                --enable-wcoss_cray_dir=intel \
                FC="ftn" \
                ... other arguments ...

which would result in the following directory tree:

  ip2/
   |
   `--v2.0.1/intel/
                |
                |--libip2_v2.0.1_4.a
                |--libip2_v2.0.1_d.a
                `--libip2_v2.0.1_8.a
                |
                `--include/
                      |
                      `--ip2_v2.0.1_4/
                      `--ip2_v2.0.1_d/
                      `--ip2_v2.0.1_8/

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
single precision library in this structure in your own application, the usual
environment variables would be modified something like:

  libroot="/usrx/local/nceplibs/ip2/v2.0.1/intel"
  FCFLAGS="-I${libroot}/include/ip2_v2.0.1_4 ${FCFLAGS}"
  LDFLAGS="-L${libroot} ${LDFLAGS}"
  LIBS="-lip2_v2.0.1_4"

GNU Install
...........

To perform a GNU-type install, type:

  $ make install

For a library version (say, v2.0.1) and the default precision (_4), this will create
a directory called "ip_v2.0.1_4". That directory structure is shown below:

  ip2_v2.0.1_4/
    |
    `--lib/
    |    |
    |    `--libip2.a
    |
    `--include/

NOTE: The only version identifier in this type of install is the name of the
      installation directory itself.

Building the remaining precision versions (_8) and (_d) and installing would 
create the following directory trees:

  ip2_v2.0.1_4/
    |
    `--lib/
    |    |
    |    `--libip2.a
    |
    `--include/

  ip2_v2.0.1_8/
    |
    `--lib/
    |    |
    |    `--libip2.a
    |
    `--include/

  ip2_v2.0.1_d/
    |
    `--lib/
    |    |
    |    `--libip2.a
    |
    `--include/

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
single precison (_4) library in this structure in your own application, the usual environment
variables would be modified something like:

  libroot="/usrx/local/nceplibs"
  LDFLAGS="-L${libroot}/ip2_v2.0.1_4/lib ${LDFLAGS}"
  LIBS="-lip2"
  FCFLAGS="... -I${libroot}/ip2_v2.0.1_4/include ..."



Uninstalling the library (after an NCO install)
...............................................

To uninstall the library (assuming you haven't moved the installation directory
contents somewhere else) you can type:

  $ make nco_uninstall

which will delete the created installation directory.

Ex: For a library version of v2.0.1, if your configure script invocation was
something like...

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "nco_uninstall" target will delete the "${PWD}/ip2/v2.0.1" directory.


Uninstalling the library after an NCO WCOSS-Cray/Surge/Luna install
...................................................................

To uninstall the library you can type:

  $ make nco_cray_uninstall

which will delete the created installation directory.

Ex: For a library version of v2.0.1, if your configure script invocation was
something like...

  $ ./configure --prefix=${PWD} \
    --enable-wcoss_cray_dir=intel  ...other command line arguments...

then the "nco_cray_uninstall" target will delete the "${PWD}/ip2/v2.0.1/intel" directory.


Uninstalling the library (after a GNU install)
..............................................

To uninstall the library after a GNU install, you can type:

  $ make uninstall
  
This will delete the created installation directory. 

Ex: for a library version of v2.0.1, a default precision of (_4),
and using "--prefix=${PWD}" during the configure, the
"${PWD}/ip2_v2.0.1_4" installation directory will be deleted.



5. Cleaning up
--------------

Two targets are provided for cleaning up after the build. To remove all the 
build products type

  $ make clean

To also remove all the configuration products (i.e. the makefiles) type

  $ make distclean
